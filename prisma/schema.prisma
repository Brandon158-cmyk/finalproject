generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id String @id @default(uuid()) @map("_id") 
  userId String
  title String @db.String
  description String? @db.String
  imageUrl String? @db.String
  price Float?
  isPublished Boolean @default(false)
  author String

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  studyGroups StudyGroup[]
  revenueShares RevenueShare[]
  chapters Chapter[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String    @id @default(uuid()) @map("_id")
  name    String    @unique
  courses Course[]
  quizzes Quiz[]
  studyGroups StudyGroup[]
}

model Chapter {
  id String @id @default(uuid()) @map("_id") 
  title String
  description String? @db.String
  videoUrl String? @db.String
  textContent String? @db.String
  position Int
  chapterType String @default("video")
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model UserProgress {
  id String @id @default(uuid()) @map("_id") 
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid()) @map("_id") 
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId]) // ! no one can buy the same course 2 times!!
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid()) @map("_id") 
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RevenueShare {
  id              String   @id @default(uuid()) @map("_id")
  courseId        String
  instructorId    String
  purchaseAmount  Float
  instructorRevenue Float
  platformFee     Float
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  course          Course   @relation(fields: [courseId], references: [id])

  @@index([instructorId])
  @@index([courseId])
}

model QuizSession {
  id          String      @id @default(uuid()) @map("_id")
  userId      String
  categoryId  String
  difficulty  String
  score       Int
  totalQuestions Int
  completedAt DateTime?
  createdAt   DateTime    @default(now())

  @@index([userId])
}

model Quiz {
  id          String      @id @default(uuid()) @map("_id")
  userId      String
  categoryId  String
  difficulty  String
  score       Int
  completed   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  category    Category    @relation(fields: [categoryId], references: [id])
  
  @@index([userId])
  @@index([categoryId])
}

model StudyGroup {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  description     String
  privacy         String    @default("public")
  courseId        String?
  categoryId      String?
  creatorId       String
  maxMembers      Int       @default(50)
  levelRequirement Int      @default(0)
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  course          Course?   @relation(fields: [courseId], references: [id])
  category        Category? @relation(fields: [categoryId], references: [id])
  members         GroupMember[]

  @@index([courseId])
  @@index([categoryId])
  @@index([creatorId])
}

model GroupMember {
  id          String     @id @default(uuid()) @map("_id")
  groupId     String
  userId      String
  role        String     @default("member")
  joinedAt    DateTime   @default(now())
  
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
}
